/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutcomeService } from "../outcome.service";
import { OutcomeCreateInput } from "./OutcomeCreateInput";
import { Outcome } from "./Outcome";
import { OutcomeFindManyArgs } from "./OutcomeFindManyArgs";
import { OutcomeWhereUniqueInput } from "./OutcomeWhereUniqueInput";
import { OutcomeUpdateInput } from "./OutcomeUpdateInput";

export class OutcomeControllerBase {
  constructor(protected readonly service: OutcomeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Outcome })
  async createOutcome(
    @common.Body() data: OutcomeCreateInput
  ): Promise<Outcome> {
    return await this.service.createOutcome({
      data: {
        ...data,

        game: data.game
          ? {
              connect: data.game,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        units: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Outcome] })
  @ApiNestedQuery(OutcomeFindManyArgs)
  async outcomes(@common.Req() request: Request): Promise<Outcome[]> {
    const args = plainToClass(OutcomeFindManyArgs, request.query);
    return this.service.outcomes({
      ...args,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        units: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Outcome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outcome(
    @common.Param() params: OutcomeWhereUniqueInput
  ): Promise<Outcome | null> {
    const result = await this.service.outcome({
      where: params,
      select: {
        createdAt: true,

        game: {
          select: {
            id: true,
          },
        },

        id: true,
        result: true,
        units: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Outcome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutcome(
    @common.Param() params: OutcomeWhereUniqueInput,
    @common.Body() data: OutcomeUpdateInput
  ): Promise<Outcome | null> {
    try {
      return await this.service.updateOutcome({
        where: params,
        data: {
          ...data,

          game: data.game
            ? {
                connect: data.game,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          game: {
            select: {
              id: true,
            },
          },

          id: true,
          result: true,
          units: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Outcome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutcome(
    @common.Param() params: OutcomeWhereUniqueInput
  ): Promise<Outcome | null> {
    try {
      return await this.service.deleteOutcome({
        where: params,
        select: {
          createdAt: true,

          game: {
            select: {
              id: true,
            },
          },

          id: true,
          result: true,
          units: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
